// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedWorkspaces   Workspace[]
  workspaceMembers  WorkspaceMember[]
  assignedTasks     Task[]
  comments          Comment[]
  taskActivities    TaskActivity[]
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3b82f6")
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner     User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members   WorkspaceMember[]
  projects  Project[]
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  role        String   @default("member") // owner, admin, member
  joinedAt    DateTime @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#10b981")
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("todo") // todo, in_progress, review, done
  priority    String   @default("medium") // low, medium, high, urgent
  startDate   DateTime?
  dueDate     DateTime?
  projectId   String
  assigneeId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project    Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee   User?          @relation(fields: [assigneeId], references: [id])
  comments   Comment[]
  activities TaskActivity[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model TaskActivity {
  id        String   @id @default(cuid())
  type      String   // created, updated, status_changed, assigned, etc.
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}